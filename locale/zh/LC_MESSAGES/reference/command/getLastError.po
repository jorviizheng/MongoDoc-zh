#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/command/getLastError.txt:3
msgid "getLastError"
msgstr ""

#: ../source/reference/command/getLastError.txt:14
msgid "Definition"
msgstr ""

#: ../source/includes/extracts/fact-2.6-wc-gle-change-cmd-getLastError.rst:5
msgid ""
"A new protocol for :ref:`write operations <rel-notes-write-operations>` "
"integrates write concerns with the write operations, eliminating the need "
"for a separate :dbcommand:`getLastError`. :ref:`Most write methods <write-"
"methods-incompatibility>` now return the status of the write operation, "
"including error information. In previous versions, clients typically used "
"the :dbcommand:`getLastError` in combination with a write operation to "
"verify that the write succeeded."
msgstr ""

#: ../source/reference/command/getLastError.txt:20
msgid ""
"Returns the error status of the preceding write operation on the *current "
"connection*."
msgstr ""

#: ../source/reference/command/getLastError.txt:23
msgid ":dbcommand:`getLastError` uses the following prototype form:"
msgstr ""

#: ../source/reference/command/getLastError.txt:29
msgid ":dbcommand:`getLastError` uses the following fields:"
msgstr ""

#: ../source/reference/command/getLastError.txt:38
msgid "Output"
msgstr ""

#: ../source/reference/command/getLastError.txt:40
msgid ""
"Each :dbcommand:`~db.collection.getLastError()` command returns a document "
"containing a subset of the fields listed below."
msgstr ""

#: ../source/reference/command/getLastError.txt:45
msgid ""
":data:`~getLastError.ok` is ``true`` when the :dbcommand:`getLastError` "
"command completes successfully."
msgstr ""

#: ../source/reference/command/getLastError.txt:48
msgid ""
"A value of ``true`` does *not* indicate that the preceding operation did not"
" produce an error."
msgstr ""

#: ../source/reference/command/getLastError.txt:53
msgid ""
":data:`~getLastError.err` is ``null`` unless an error occurs. When there was"
" an error with the preceding operation, ``err`` contains a string "
"identifying the error."
msgstr ""

#: ../source/reference/command/getLastError.txt:61
msgid ""
":data:`~getLastError.errmsg` contains the description of the error. "
":data:`~getLastError.errmsg` only appears if there was an error with the "
"preceding operation."
msgstr ""

#: ../source/reference/command/getLastError.txt:67
msgid ""
":data:`~getLastError.code` reports the preceding operation's error code. For"
" description of the error, see :data:`~getLastError.err` and "
":data:`~getLastError.errmsg`."
msgstr ""

#: ../source/reference/command/getLastError.txt:73
msgid "The identifier of the connection."
msgstr ""

#: ../source/reference/command/getLastError.txt:77
msgid ""
"When issued against a replica set member and the preceding operation was a "
"write or update, :data:`~getLastError.lastOp` is the *optime* timestamp in "
"the :term:`oplog`  of the change."
msgstr ""

#: ../source/reference/command/getLastError.txt:83
msgid ""
"If the preceding operation was an update or a remove operation, but *not* a "
":dbcommand:`findAndModify` operation, :data:`~getLastError.n` reports the "
"number of documents matched by the update or remove operation."
msgstr ""

#: ../source/reference/command/getLastError.txt:88
msgid ""
"For a remove operation, the number of matched documents will equal the "
"number removed."
msgstr ""

#: ../source/reference/command/getLastError.txt:99
msgid ""
":data:`~getLastError.n` is ``0`` if reporting on an update or remove that "
"occurs through a :dbcommand:`findAndModify` operation."
msgstr ""

#: ../source/reference/command/getLastError.txt:104
msgid ""
":data:`~getLastError.syncMillis` is the number of milliseconds spent waiting"
" for the write to disk operation (e.g. write to journal files)."
msgstr ""

#: ../source/reference/command/getLastError.txt:110
msgid ""
"When issued against a sharded cluster after a write operation, "
":data:`~getLastError.shards` identifies the shards targeted in the write "
"operation. :data:`~getLastError.shards` is present in the output only if the"
" write operation targets multiple shards."
msgstr ""

#: ../source/reference/command/getLastError.txt:117
msgid ""
"When issued against a sharded cluster after a write operation, identifies "
"the shard targeted in the write operation. :data:`~getLastError.singleShard`"
" is only present if the write operation targets exactly one shard."
msgstr ""

#: ../source/reference/command/getLastError.txt:124
msgid ""
":data:`~getLastError.updatedExisting` is ``true`` when an update affects at "
"least one document and does not result in an :term:`upsert`."
msgstr ""

#: ../source/reference/command/getLastError.txt:130
msgid ""
"If the update results in an insert, :data:`~getLastError.upserted` is the "
"value of ``_id`` field of the document."
msgstr ""

#: ../source/reference/command/getLastError.txt:133
msgid ""
"Earlier versions of MongoDB included :data:`~getLastError.upserted` only if "
"``_id`` was an :term:`ObjectId <objectid>`."
msgstr ""

#: ../source/reference/command/getLastError.txt:140
msgid ""
"If set, ``wnote`` indicates that the preceding operation's error relates to "
"using the ``w`` parameter to :dbcommand:`getLastError`."
msgstr ""

#: ../source/reference/command/getLastError.txt:0
msgid "See"
msgstr ""

#: ../source/reference/command/getLastError.txt:148
msgid ""
":data:`~getLastError.wtimeout` is ``true`` if the :dbcommand:`getLastError` "
"timed out because of the ``wtimeout`` setting to :dbcommand:`getLastError`."
msgstr ""

#: ../source/reference/command/getLastError.txt:154
msgid ""
"If the preceding operation specified a timeout using the ``wtimeout`` "
"setting to :dbcommand:`getLastError`, then :data:`~getLastError.waited` "
"reports the number of milliseconds :dbcommand:`getLastError` waited before "
"timing out."
msgstr ""

#: ../source/reference/command/getLastError.txt:161
msgid ""
":data:`getLastError.wtime` is the number of milliseconds spent waiting for "
"the preceding operation to complete. If :dbcommand:`getLastError` timed out,"
" :data:`~getLastError.wtime` and :dbcommand:`getLastError.waited` are equal."
msgstr ""

#: ../source/reference/command/getLastError.txt:168
msgid ""
"If writing to a replica set, :data:`~getLastError.writtenTo` is an array "
"that contains the hostname and port number of the members that confirmed the"
" previous write operation, based on the value of the ``w`` field in the "
"command."
msgstr ""

#: ../source/reference/command/getLastError.txt:176
msgid "Examples"
msgstr ""

#: ../source/reference/command/getLastError.txt:179
msgid "Confirm Replication to Two Replica Set Members"
msgstr ""

#: ../source/reference/command/getLastError.txt:181
msgid ""
"The following example ensures the preceding operation has replicated to two "
"members (the primary and one other member). The command also specifies a "
"timeout of ``5000`` milliseconds to ensure that the:dbcommand:`getLastError`"
" command does not block forever if MongoDB cannot satisfy the requested "
"write concern:"
msgstr ""

#: ../source/reference/command/getLastError.txt:192
msgid "Confirm Replication to a Majority of a Replica Set"
msgstr ""

#: ../source/reference/command/getLastError.txt:194
msgid ""
"The following example ensures the write operation has replicated to a "
"majority of the voting members of the replica set. The command also "
"specifies a timeout of ``5000`` milliseconds to ensure that "
"the:dbcommand:`getLastError` command does not block forever if MongoDB "
"cannot satisfy the requested write concern:"
msgstr ""

#: ../source/includes/fact-master-slave-majority.rst:1
msgid ""
"In :doc:`Master/Slave </core/master-slave>` deployments, MongoDB treats ``w:"
" \"majority\"`` as equivalent to ``w: 1``. In earlier versions of MongoDB, "
"``w: \"majority\"`` produces an error in :doc:`master/slave </core/master-"
"slave>` deployments."
msgstr ""

#: ../source/reference/command/getLastError.txt:0
msgid "On this page"
msgstr ""

#: ../source/reference/command/getLastError.txt:33
msgid ":doc:`/reference/write-concern`"
msgstr ""

#: ../source/reference/command/getLastError.txt:91
msgid ""
"For an update operation, if the operation results in no change to the "
"document, such as setting the value of the field to its current value, the "
"number of matched documents may be smaller than the number of documents "
"actually modified. If the update includes the ``upsert:true`` option and "
"results in the creation of a new document, :data:`~getLastError.n` returns "
"the number of documents inserted."
msgstr ""

#~ msgid ""
#~ ":doc:`Write Concern </core/write-concern>`, :doc:`/reference/write-concern`,"
#~ " and :ref:`replica-set-write-concern`."
#~ msgstr ""

#~ msgid ""
#~ "For an update operation, if the update operation results in no change to the"
#~ " document, such as setting the value of the field to its current value, the "
#~ "number of matched documents may be smaller than the number of documents "
#~ "actually modified. If the update includes the ``upsert:true`` option and "
#~ "results in the creation of a new document, :data:`~getLastError.n` returns "
#~ "the number of documents inserted."
#~ msgstr ""
