#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/command/compact.txt:5
msgid "compact"
msgstr ""

#: ../source/reference/command/compact.txt:16
msgid "Definition"
msgstr ""

#: ../source/reference/command/compact.txt:34
msgid ""
"Always have an up-to-date backup before performing server maintenance such "
"as the :dbcommand:`compact` operation."
msgstr ""

#: ../source/reference/command/compact.txt:40
msgid "paddingFactor"
msgstr ""

#: ../source/reference/command/compact.txt:44
msgid ""
"Applicable for the MMAPv1 storage engine only; specifying ``paddingFactor`` "
"has no effect when used with the WiredTiger storage engine."
msgstr ""

#: ../source/reference/command/compact.txt:48
msgid "The ``paddingFactor`` field takes the following range of values:"
msgstr ""

#: ../source/reference/command/compact.txt:50
msgid "Default: ``1.0``"
msgstr ""

#: ../source/reference/command/compact.txt:52
msgid "Minimum: ``1.0`` (no padding)"
msgstr ""

#: ../source/reference/command/compact.txt:54
msgid "Maximum: ``4.0``"
msgstr ""

#: ../source/reference/command/compact.txt:56
msgid ""
"If your updates increase the size of the documents, padding will increase "
"the amount of space allocated to each document and avoid expensive document "
"relocation operations within the data files."
msgstr ""

#: ../source/reference/command/compact.txt:60
msgid ""
"You can calculate the padding size by subtracting the document size from the"
" record size or, in terms of the ``paddingFactor``, by subtracting ``1`` "
"from the ``paddingFactor``:"
msgstr ""

#: ../source/reference/command/compact.txt:68
msgid ""
"For example, a ``paddingFactor`` of ``1.0`` specifies a padding size of "
"``0`` whereas a ``paddingFactor`` of ``1.2`` specifies a padding size of "
"``0.2`` or 20 percent (20%) of the document size."
msgstr ""

#: ../source/reference/command/compact.txt:72
msgid ""
"With the following command, you can use the ``paddingFactor`` option of the "
":dbcommand:`compact` command to set the record size to ``1.1`` of the "
"document size, or a padding factor of 10 percent (10%):"
msgstr ""

#: ../source/reference/command/compact.txt:86
msgid "paddingBytes"
msgstr ""

#: ../source/reference/command/compact.txt:90
msgid ""
"Applicable for the MMAPv1 storage engine only; specifying ``paddingBytes`` "
"has no effect when used with the WiredTiger storage engine."
msgstr ""

#: ../source/reference/command/compact.txt:115
msgid "Blocking"
msgstr ""

#: ../source/reference/command/compact.txt:121
msgid ""
"You may view the intermediate progress either by viewing the "
":program:`mongod` log file or by running the :method:`db.currentOp()` in "
"another shell instance."
msgstr ""

#: ../source/reference/command/compact.txt:126
msgid "Operation Termination"
msgstr ""

#: ../source/reference/command/compact.txt:132
msgid ""
"If you have journaling enabled, the data remains valid and usable, "
"regardless of the state of the :dbcommand:`compact` operation. You may have "
"to manually rebuild the indexes."
msgstr ""

#: ../source/reference/command/compact.txt:136
msgid ""
"If you do not have journaling enabled and the :program:`mongod` or "
":dbcommand:`compact` terminates during the operation, it is impossible to "
"guarantee that the data is in a valid state."
msgstr ""

#: ../source/reference/command/compact.txt:140
msgid ""
"In either case, much of the existing free space in the collection may become"
" un-reusable. In this scenario, you should rerun the compaction to "
"completion to restore the use of this free space."
msgstr ""

#: ../source/reference/command/compact.txt:145
msgid "Disk Space"
msgstr ""

#: ../source/reference/command/compact.txt:150
msgid ""
"To see how the storage space changes for the collection, run the "
":dbcommand:`collStats` command before and after compaction."
msgstr ""

#: ../source/reference/command/compact.txt:174
msgid "Size and Number of Data Files"
msgstr ""

#: ../source/reference/command/compact.txt:176
msgid ""
":dbcommand:`compact` may increase the total size and number of your data "
"files, especially when run for the first time. However, this will not "
"increase the total collection storage space since storage size is the amount"
" of data allocated within the database files, and not the size/number of the"
" files on the file system."
msgstr ""

#: ../source/reference/command/compact.txt:183
msgid "Replica Sets"
msgstr ""

#: ../source/reference/command/compact.txt:188
msgid "Compact each member separately."
msgstr ""

#: ../source/reference/command/compact.txt:190
msgid ""
"Ideally run :dbcommand:`compact` on a secondary. See option ``force:true`` "
"above for information regarding compacting the primary."
msgstr ""

#: ../source/includes/extracts/fact-command-puts-secondary-into-recovering-compact.rst:3
msgid ""
"On secondaries, the  command forces the secondary to enter "
":replstate:`RECOVERING` state. Read operations issued to an instance in the "
":replstate:`RECOVERING` state will fail.  This prevents clients from reading"
" during the operation. When the operation completes, the secondary returns "
"to :replstate:`SECONDARY` state."
msgstr ""

#: ../source/includes/extracts/fact-command-puts-secondary-into-recovering-compact.rst:10
msgid ""
"See :doc:`/reference/replica-states/` for more information about replica set"
" member states."
msgstr ""

#: ../source/includes/extracts/fact-command-puts-secondary-into-recovering-compact.rst:13
msgid ""
"See :doc:`/tutorial/perform-maintence-on-replica-set-members` for an example"
" replica set maintenance procedure to maximize availability during "
"maintenance operations."
msgstr ""

#: ../source/reference/command/compact.txt:196
msgid "Sharded Clusters"
msgstr ""

#: ../source/reference/command/compact.txt:202
msgid ""
"You cannot issue :dbcommand:`compact` against a :program:`mongos` instance."
msgstr ""

#: ../source/reference/command/compact.txt:205
msgid "Capped Collections"
msgstr ""

#: ../source/reference/command/compact.txt:212
msgid "Index Building"
msgstr ""

#: ../source/reference/command/compact.txt:216
msgid ""
":program:`mongod` rebuilds all indexes in parallel following the "
":dbcommand:`compact` operation."
msgstr ""

#: ../source/reference/command/compact.txt:0
msgid "On this page"
msgstr ""

#: ../source/reference/command/compact.txt:20
msgid ""
"Rewrites and defragments all data and indexes in a collection. On "
":ref:`WiredTiger <storage-wiredtiger>` databases, this command will release "
"unneeded disk space to the operating system."
msgstr ""

#: ../source/reference/command/compact.txt:24
msgid ":dbcommand:`compact` has the following form:"
msgstr ""

#: ../source/reference/command/compact.txt:30
msgid ":dbcommand:`compact` takes the following fields:"
msgstr ""

#: ../source/reference/command/compact.txt:80
msgid ""
":dbcommand:`compact` modifies existing documents, but does not set the "
"padding factor for future documents."
msgstr ""

#: ../source/reference/command/compact.txt:94
msgid ""
"Specifying ``paddingBytes`` can be useful if your documents start small but "
"then increase in size significantly."
msgstr ""

#: ../source/reference/command/compact.txt:97
msgid ""
"For example, if your documents are initially 40 bytes long and you grow them"
" by 1 kB, using ``paddingBytes: 1024`` might be reasonable since using "
"``paddingFactor: 4.0`` would specify a record size of 160 bytes (``4.0`` "
"times the initial document size), which would only provide a padding of 120 "
"bytes (i.e. record size of 160 bytes minus the document size)."
msgstr ""

#: ../source/reference/command/compact.txt:104
msgid ""
"The following command uses the ``paddingBytes`` option to set the padding "
"size to 100 bytes on the collection named by ``<collection>``:"
msgstr ""

#: ../source/reference/command/compact.txt:112
msgid "Behavior"
msgstr ""

#: ../source/reference/command/compact.txt:117
msgid ""
":dbcommand:`compact` only blocks operations for the database it is currently"
" operating on. Only use :dbcommand:`compact` during scheduled maintenance "
"periods."
msgstr ""

#: ../source/reference/command/compact.txt:128
msgid ""
"If you terminate the operation with the :method:`db.killOp() <db.killOp()>` "
"method or restart the server before the :dbcommand:`compact` operation has "
"finished, be aware of the following:"
msgstr ""

#: ../source/reference/command/compact.txt:147
msgid ""
":dbcommand:`compact` has different impacts on available disk space depending"
" on which storage engine is in use."
msgstr ""

#: ../source/reference/command/compact.txt:154
msgid "WiredTiger"
msgstr ""

#: ../source/reference/command/compact.txt:156
msgid ""
"On :ref:`WiredTiger <storage-wiredtiger>`, :dbcommand:`compact` will rewrite"
" the collection and indexes to minimize disk space by releasing unused disk "
"space to the system. This is useful if you have removed a large amount of "
"data from the collection, and do not plan to replace it."
msgstr ""

#: ../source/reference/command/compact.txt:162
msgid "MMAPv1"
msgstr ""

#: ../source/reference/command/compact.txt:164
msgid ""
"On :ref:`MMAPv1 <storage-mmapv1>`, :dbcommand:`compact` defragments the "
"collection's data files and recreates its indexes. Unused disk space is "
"*not* released to the system, but instead retained for future data. If you "
"wish to reclaim disk space from a MMAPv1 database, you should perform an "
":term:`initial sync`."
msgstr ""

#: ../source/reference/command/compact.txt:170
msgid ""
":dbcommand:`compact` requires up to 2 gigabytes of additional disk space to "
"run on MMAPv1 databases."
msgstr ""

#: ../source/reference/command/compact.txt:185
msgid ""
":dbcommand:`compact` commands do not replicate to secondaries in a "
":term:`replica set`."
msgstr ""

#: ../source/reference/command/compact.txt:198
msgid ""
":dbcommand:`compact` only applies to :program:`mongod` instances. In a "
"sharded environment, run :dbcommand:`compact` on each shard separately as a "
"maintenance operation."
msgstr ""

#: ../source/reference/command/compact.txt:207
msgid ""
"It is not possible or necessary to compact :term:`capped collections <capped"
" collection>` because they lack padding and their documents cannot grow. As "
"a result, they cannot become fragmented."
msgstr ""

#~ msgid ""
#~ "Rewrites and defragments all data in a collection, as well as all of the "
#~ "indexes on that collection. :dbcommand:`compact` has the following form:"
#~ msgstr ""

#~ msgid ":dbcommand:`compact` has the following fields:"
#~ msgstr ""

#~ msgid ""
#~ ":dbcommand:`compact` is similar to :dbcommand:`repairDatabase`; however, "
#~ ":dbcommand:`repairDatabase` operates on an entire database."
#~ msgstr ""

#~ msgid ""
#~ ":dbcommand:`compact` compacts existing documents but does not reset "
#~ "``paddingFactor`` statistics for the collection. After the "
#~ ":dbcommand:`compact` MongoDB will use the existing ``paddingFactor`` when "
#~ "allocating new records for documents in this collection."
#~ msgstr ""

#~ msgid ""
#~ "Specifying ``paddingBytes`` can be useful if your documents start small but "
#~ "then increase in size significantly. For example, if your documents are "
#~ "initially 40 bytes long and you grow them by 1KB, using ``paddingBytes: "
#~ "1024`` might be reasonable since using ``paddingFactor: 4.0`` would specify "
#~ "a record size of 160 bytes (``4.0`` times the initial document size), which "
#~ "would only provide a padding of 120 bytes (i.e. record size of 160 bytes "
#~ "minus the document size)."
#~ msgstr ""

#~ msgid ""
#~ "With the following command, you can use the ``paddingBytes`` option of the "
#~ ":dbcommand:`compact` command to set the padding size to ``100`` bytes on the"
#~ " collection named by ``<collection>``:"
#~ msgstr ""

#~ msgid "Behaviors"
#~ msgstr ""

#~ msgid ""
#~ "In MongoDB 2.2, :dbcommand:`compact` blocks activities only for its "
#~ "database. Prior to 2.2, the command blocked all activities."
#~ msgstr ""

#~ msgid ""
#~ "If you terminate the operation with the :method:`db.killOp() <db.killOp()>` "
#~ "method or restart the server before the :dbcommand:`compact` operation has "
#~ "finished:"
#~ msgstr ""

#~ msgid ""
#~ ":dbcommand:`compact` generally uses less disk space than "
#~ ":dbcommand:`repairDatabase` and is faster. However, the :dbcommand:`compact`"
#~ " command is still slow and blocks other database use. Only use "
#~ ":dbcommand:`compact` during scheduled maintenance periods."
#~ msgstr ""

#~ msgid ""
#~ ":dbcommand:`compact` requires up to 2 gigabytes of additional disk space "
#~ "while running. Unlike :dbcommand:`repairDatabase`, :dbcommand:`compact` does"
#~ " *not* free space on the file system."
#~ msgstr ""

#~ msgid ""
#~ ":dbcommand:`compact` commands do not replicate to secondaries in a "
#~ ":term:`replica set`:"
#~ msgstr ""

#~ msgid ""
#~ ":dbcommand:`compact` is a command issued to a :program:`mongod`. In a "
#~ "sharded environment, run :dbcommand:`compact` on each shard separately as a "
#~ "maintenance operation."
#~ msgstr ""

#~ msgid ""
#~ "It is not possible to compact :term:`capped collections <capped collection>`"
#~ " because they don't have padding, and documents cannot grow in these "
#~ "collections. However, the documents of a :term:`capped collection` are not "
#~ "subject to fragmentation."
#~ msgstr ""
