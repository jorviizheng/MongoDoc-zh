# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2013-12-16 22:40+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-manual/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# adb7002b96aa40c3b3c4d6b68cb7746c
#: ../source/tutorial/model-tree-structures.txt:7
msgid "Model Tree Structures in MongoDB"
msgstr ""

# 3b8b985f1b9240cb853f84e91533c0d0
#: ../source/tutorial/model-tree-structures.txt:9
msgid ""
"To model hierarchical or nested data relationships, you can use references "
"to implement tree-like structures. The following *Tree* pattern examples "
"model book categories that have hierarchical relationships."
msgstr ""

# 25e0f7e5b1414d0c9610011ed7f7fa60
#: ../source/tutorial/model-tree-structures.txt:15
msgid "Model Tree Structures with Child References"
msgstr ""

# 55b71b90be8c47ab8ec40ea8147ae6f2
#: ../source/tutorial/model-tree-structures.txt:17
msgid "(:doc:`link </tutorial/model-tree-structures-with-child-references>`)"
msgstr ""

# c34ab36b29b848e89486a56026d59f2d
#: ../source/tutorial/model-tree-structures-with-child-references.txt:3
msgid ""
"The *Child References* pattern stores each tree node in a document; in "
"addition to the tree node, document stores in an array the id(s) of the "
"node's children."
msgstr ""

# 875216c13d614d9da169b0a4dbba2a77
# 4a1003f64f104f98ad25a7eef11aa8a4
# 2ea517a1db4d4ce2a64dea689ac41fd2
# 57bc4bc4e61643cfbda07865b6a0caad
# 680dd7f6c42e400db31881e0aa2ff5bf
#: ../source/tutorial/model-tree-structures-with-child-references.txt:7
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:7
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:7
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:11
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:11
msgid "Consider the following hierarchy of categories:"
msgstr ""

# 8e9f414d3b344fa2ade24dc414eeb117
#: ../source/tutorial/model-tree-structures-with-child-references.txt:11
msgid ""
"The following example models the tree using *Child References*, storing the "
"reference to the node's children in the field ``children``:"
msgstr ""

# 4052290418044866914375a532d4e731
#: ../source/tutorial/model-tree-structures-with-child-references.txt:23
msgid ""
"The query to retrieve the immediate children of a node is fast and "
"straightforward:"
msgstr ""

# bbd948767b874b3fa45dd40a86b0b5ef
#: ../source/tutorial/model-tree-structures-with-child-references.txt:30
msgid ""
"You can create an index on the field ``children`` to enable fast search by "
"the child nodes:"
msgstr ""

# 00970912d0184cd19aaf1b7afd2ce7f3
#: ../source/tutorial/model-tree-structures-with-child-references.txt:37
msgid ""
"You can query for a node in the ``children`` field to find its parent node "
"as well as its siblings:"
msgstr ""

# e9090145c9d541dea10b07dda3717fd3
#: ../source/tutorial/model-tree-structures-with-child-references.txt:44
msgid ""
"The *Child References* pattern provides a suitable solution to tree storage "
"as long as no operations on subtrees are necessary. This pattern may also "
"provide a suitable solution for storing graphs where a node may have "
"multiple parents."
msgstr ""

# 4fad037b090642e49ee5e0bde7f04256
#: ../source/tutorial/model-tree-structures.txt:23
msgid "Model Tree Structures with Parent References"
msgstr ""

# 1ed61747a0564baba6d649fe6b6b35d8
#: ../source/tutorial/model-tree-structures.txt:25
msgid "(:doc:`link </tutorial/model-tree-structures-with-parent-references>`)"
msgstr ""

# b25bf632a9614298a89268498b17accd
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:3
msgid ""
"The *Parent References* pattern stores each tree node in a document; in "
"addition to the tree node, the document stores the id of the node's parent."
msgstr ""

# 618ddd67932a49a88efc322349f75938
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:12
msgid ""
"The following example models the tree using *Parent References*, storing the"
" reference to the parent category in the field ``parent``:"
msgstr ""

# 0117129b51d14949b51f52ceeecc05cd
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:24
msgid ""
"The query to retrieve the parent of a node is fast and straightforward:"
msgstr ""

# f95f89742fa448f6963bbed29b5e5940
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:31
msgid ""
"You can create an index on the field ``parent`` to enable fast search by the"
" parent node:"
msgstr ""

# b76f1e6d89be484db56e25d10548e56a
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:38
msgid ""
"You can query by the ``parent`` field to find its immediate children nodes:"
msgstr ""

# 8bdc349796754901972b997e6fa0d7ee
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:45
msgid ""
"The *Parent Links* pattern provides a simple solution to tree storage but "
"requires multiple queries to retrieve subtrees."
msgstr ""

# fed6b885910c40dc8b73d319b1e83cb6
#: ../source/tutorial/model-tree-structures.txt:31
msgid "Model Tree Structures with an Array of Ancestors"
msgstr ""

# 338e19043d654ca79eacfe02c42b17a2
#: ../source/tutorial/model-tree-structures.txt:33
msgid "(:doc:`link </tutorial/model-tree-structures-with-ancestors-array>`)"
msgstr ""

# 24d80b95800f44fc9f09a076c16f6742
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:3
msgid ""
"The *Array of Ancestors* pattern stores each tree node in a document; in "
"addition to the tree node, document stores in an array the id(s) of the "
"node's ancestors or path."
msgstr ""

# d4f2a6dbf5604f6192a53d19d07b794c
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:11
msgid ""
"The following example models the tree using *Array of Ancestors*. In "
"addition to the ``ancestors`` field, these documents also store the "
"reference to the immediate parent category in the ``parent`` field:"
msgstr ""

# 5af0cd9f909243caa742dc371500339a
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:24
msgid ""
"The query to retrieve the ancestors or path of a node is fast and "
"straightforward:"
msgstr ""

# 95950da6b7d24994936b33b7b02f1248
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:31
msgid ""
"You can create an index on the field ``ancestors`` to enable fast search by "
"the ancestors nodes:"
msgstr ""

# ca5613f3c73e42a68f2206387b5b1919
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:38
msgid "You can query by the field ``ancestors`` to find all its descendants:"
msgstr ""

# c587834dfe1b47d982128a6c8bc69701
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:44
msgid ""
"The *Array of Ancestors* pattern provides a fast and efficient solution to "
"find the descendants and the ancestors of a node by creating an index on the"
" elements of the ancestors field. This makes *Array of Ancestors* a good "
"choice for working with subtrees."
msgstr ""

# 918b8c3f170a4c9a8c51d9eb634f4b83
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:49
msgid ""
"The *Array of Ancestors* pattern is slightly slower than the "
":doc:`Materialized Paths </tutorial/model-tree-structures-with-materialized-"
"paths>` pattern but is more straightforward to use."
msgstr ""

# a824200a042949d38b9cdf848b15fdf2
#: ../source/tutorial/model-tree-structures.txt:39
msgid "Model Tree Structures with Materialized Paths"
msgstr ""

# 19401580e2954791aec1b4d135012a90
#: ../source/tutorial/model-tree-structures.txt:41
msgid ""
"(:doc:`link </tutorial/model-tree-structures-with-materialized-paths>`)"
msgstr ""

# 19e6c6a7bbc948d6a747ba9b36899d0d
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:3
msgid ""
"The *Materialized Paths* pattern stores each tree node in a document; in "
"addition to the tree node, document stores as a string the id(s) of the "
"node's ancestors or path. Although the *Materialized Paths* pattern requires"
" additional steps of working with strings and regular expressions, the "
"pattern also provides more flexibility in working with the path, such as "
"finding nodes by partial paths."
msgstr ""

# 7ecb9ea95f8945109e3b36f0ea44fac9
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:15
msgid ""
"The following example models the tree using *Materialized Paths*, storing "
"the path in the field ``path``; the path string uses the comma ``,`` as a "
"delimiter:"
msgstr ""

# 17527f68b82c4082ab76dccd007bda3c
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:28
msgid ""
"You can query to retrieve the whole tree, sorting by the field ``path``:"
msgstr ""

# 41109b31cda3491d9d612faff2acfd74
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:35
msgid ""
"You can use regular expressions on the ``path`` field to find the "
"descendants of ``Programming``:"
msgstr ""

# ccca3afb14f744a8a49c170005a54dbe
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:42
msgid ""
"You can also retrieve the descendants of ``Books`` where the ``Books`` is "
"also at the topmost level of the hierarchy:"
msgstr ""

# 6e11df5e3e2c486a8526ef45e750c460
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:49
msgid "To create an index on the field ``path`` use the following invocation:"
msgstr ""

# b84a1e48ba0241609ad52a1a6a10636f
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:56
msgid "This index may improve performance depending on the query:"
msgstr ""

# 8244942442ae4c64ba7c0710b5685e3d
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:58
msgid ""
"For queries of the ``Books`` sub-tree (e.g. ``/^,Books,/``) an index on the "
"``path`` field improves the query performance significantly."
msgstr ""

# afbff193e7544b8c8b53770e1534f290
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:62
msgid ""
"For queries of the ``Programming`` sub-tree (e.g. ``/,Programming,/``), or "
"similar queries of sub-tress, where the node might be in the middle of the "
"indexed string, the query must inspect the entire index."
msgstr ""

# 74433df6c41145bf8fdc480df0aa36de
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:67
msgid ""
"For these queries an index *may* provide some performance improvement *if* "
"the index is significantly smaller than the entire collection."
msgstr ""

# 3d5bf1e5d76d49ee8fc20cf8c5abb362
#: ../source/tutorial/model-tree-structures.txt:47
msgid "Model Tree Structures with Nested Sets"
msgstr ""

# f97ce16bdfea4fac8954db04e5566d57
#: ../source/tutorial/model-tree-structures.txt:49
msgid "(:doc:`link </tutorial/model-tree-structures-with-nested-sets>`)"
msgstr ""

# 1841a5da8a5144fe95fe9ad55d5fe4f2
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:3
msgid ""
"The *Nested Sets* pattern identifies each node in the tree as stops in a "
"round-trip traversal of the tree. The application visits each node in the "
"tree twice; first during the initial trip, and second during the return "
"trip. The *Nested Sets* pattern stores each tree node in a document; in "
"addition to the tree node, document stores the id of node's parent, the "
"node's initial stop in the ``left`` field, and its return stop in the "
"``right`` field."
msgstr ""

# f49eff5e631d439e9f5af98604a9dabc
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:15
msgid "The following example models the tree using *Nested Sets*:"
msgstr ""

# d44ed5598bcf4c23bd304656e086e807
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:26
msgid "You can query to retrieve the descendants of a node:"
msgstr ""

# 1820b3a86c4e4c218b9feaf5fb37276b
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:33
msgid ""
"The *Nested Sets* pattern provides a fast and efficient solution for finding"
" subtrees but is inefficient for modifying the tree structure. As such, this"
" pattern is best for static trees that do not change."
msgstr ""
