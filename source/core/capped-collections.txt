==================
上限集合
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

概述
--------

:term:`上限集合 <capped collection>` 是固定大小的集合, 它
支持高吞吐量操作, 这些操作根据插入顺序插入和检索文档。上限集合
以类似于圆形缓冲区的方式工作: 一旦集合填充了其分配的空间, 它
就会通过改写集合中最早的文档来为新文档腾出余地。

有关创建上限集合的详细信息, 请参见 :method:`~db.createCollection()` or
:dbcommand:`create` .

行为
--------

插入顺序
~~~~~~~~~~~~~~~

上限集合保证了插入顺序的保存。因此, 查询不需要索引以插入顺序返回文档。
没有此索引开销, 上限集合可以支持更高的插入吞吐量。

自动删除最早的文档
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

为新文档腾出空间, 上限集合会自动删除集合中最早的文档, 而不需要脚本或显式删除操作。

例如, 存储在 :term:`replica set` 中的操作日志的 :term:`oplog.rs <oplog>` 集合
使用一个上限集合。请考虑以下可能的上限集合用例:

- 存储由高容量系统生成的日志信息。在没有索引的集合中插入文档是接近于将
  日志信息直接写入文件系统的速度。此外, 内置 *先进先出* 属性在管理存储
  使用时维护事件的顺序。

- 在一个上限集合中缓存少量数据。因为缓存是读多写少的, 所以您需要
  确保此集合 *始终* 保留在工作集 (即 RAM 中)。 *或* 接受对所需索引或索引
  的某些写延迟。

``_id`` 索引
~~~~~~~~~~~~~

默认情况下, 上限集合具有``_id``字段和``_id``字段上的索引。

.. _capped-collections-recommendations-and-restrictions:

限制和建议
--------------------------------

更新
~~~~~~~

如果计划更新上限集合中的文档, 请创建索引, 以便这些更新操作不需要全表扫描。

文档大小
~~~~~~~~~~~~~

.. versionchanged:: 3.2

.. include:: /includes/extracts/capped-collection-immutable-document-size.rst

文档删除
~~~~~~~~~~~~~~~~~

不能从上限集合中删除文档。若要从集合中移除所有文档, 请使用
:method:`~db.collection.drop()`方法除去集合并重新创建上限集合。

分片
~~~~~~~~

不能切分一个上限集合。

查询效率
~~~~~~~~~~~~~~~~

使用自然排序可以有效地从集合中检索最近插入的元素。这是 (有点) 类似于 tail 一个日志文件。

聚合 ``$out``
~~~~~~~~~~~~~~~~~~~~

聚合管线运算符 :pipeline:`$out` 无法将结果写入上限集合。

.. include:: /includes/replacement-mms.rst

程序
----------

创建上限集合
~~~~~~~~~~~~~~~~~~~~~~~~~~

必须使用 :method:`db.createCollection()` 方法显式创建上限集合, 它是
:dbcommand:`create` 命令的 :program:`mongo` shell 助手。创建上限集合时, 必须
指定集合的最大大小 (以字节为单位), MongoDB 将为集合预分配空间。上限集合的
大小包括少量的内部开销空间。

.. code-block:: javascript

   db.createCollection( "log", { capped: true, size: 100000 } )

如果 ``size`` 字段小于或等于 4096 , 则集合将具有4096字节的上限。否
则, MongoDB 将提高所提供的大小, 使其成为256的整数倍数。

此外, 还可以使用以下文档中的 ``max`` 字段为集合指定最大数量的文档:

.. code-block:: javascript

   db.createCollection("log", { capped : true, size : 5242880, max : 5000 } )

.. important:: 即使指定了 ``max`` 参数, 也 *始终* 需要 ``size`` 参数。如果
   集合达到最大的大小限制, MongoDB 在达到最大文档计数前就会删掉较旧的文档.

.. see:: :method:`db.createCollection()` 和  :dbcommand:`create`.

.. _capped-collections-options:

查询上限集合
~~~~~~~~~~~~~~~~~~~~~~~~~

如果在未指定排序的上限集合上执行 :method:`~db.collection.find()` , MongoDB 保证
结果的排序与插入顺序相同。

若要以反向插入顺序检索文档, 请与排序 () 方法一起使用 $ 自然参数设置为-1, 如下面的示例所示:
使用 :method:`~db.collection.find()` 连同 :method:`~cursor.sort()`
方法, 并将 :operator:`$natural` 参数设置成 ``-1``, 如下所示

.. code-block:: javascript

   db.cappedCollection.find().sort( { $natural: -1 } )

检查集合是否有上限
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

使用 :method:`~db.collection.isCapped()` 方法确定集合是否有上限, 如下所示:

.. code-block:: javascript

   db.collection.isCapped()

将集合转换为上限集合
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

可以使用 :dbcommand:`convertToCapped` 命令将非上限集合转换为上限集合:

.. code-block:: javascript

   db.runCommand({"convertToCapped": "mycoll", size: 100000});

``size`` 参数指定上限集合的大小 (以字节为单位)。

.. include:: /includes/warning-blocking-global.rst

在指定的时间段后自动删除数据
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

若要在过期数据时获得额外的灵活性, 请考虑 MongoDB 的 :term:`TTL` 索引, 如
:doc:`/tutorial/expire-data` 所述。这些索引允许您根据日期类型字段的值
和索引的 TTL 值, 使用特殊类型从常规集合中过期和删除数据。

:doc:`TTL 集合 </tutorial/expire-data>` 与上限集合不兼容。

Tailable 游标
~~~~~~~~~~~~~~~

可以在上限集合使用 :term:`tailable cursor` 。类似
于 Unix ``tail -f`` 命令, tailable 游标 "tails" 上限集合的结尾。当
新文档插入到上限集合中时, 可以使用 tailable 游标继续检索文档。

有关创建 Tailable 游标的信息, 请参见 :doc:`/core/tailable-cursors` .
