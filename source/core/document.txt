.. _bson-document-format:

=========
文档
=========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB 将数据记录存储为 BSON 文档。BSON 是 :term:`JSON` 文档的二
进制表示, 尽管它包含的数据类型多于 JSON。对于 BSON 规范,
请参见 `bsonspec.org <http://bsonspec.org/>`_ 。
另请参见 :doc:`/reference/bson-types` 。(译：MongoDB中的文档(document)指的是一种
特定格式的 **数据** , 集合(表)中的一条数据也叫文档(document), 数据库操作中也靠文档(document)传参)

.. include:: /images/crud-annotated-document.rst

.. _document-structure:

文档结构
------------------

MongoDB 文档由字段和值对组成, 并具有以下结构:

.. code-block:: javascript

   {
      field1: value1,
      field2: value2,
      field3: value3,
      ...
      fieldN: valueN
   }

字段的值可以是任何 BSON 数据类型 :doc:`数据类型</reference/bson-types>` ,
包括其他文档、数组和文档的数组。例如, 下面的文档包含不同类型的值:

.. code-block:: javascript

   var mydoc = {
                  _id: ObjectId("5099803df3f4948bd2f98391"),
                  name: { first: "Alan", last: "Turing" },
                  birth: new Date('Jun 23, 1912'),
                  death: new Date('Jun 07, 1954'),
                  contribs: [ "Turing machine", "Turing test", "Turingery" ],
                  views : NumberLong(1250000)
               }

以上字段具有以下数据类型:

- ``_id`` 持有 :ref:`objectid`.

- ``name`` 保存包含 ``first`` 和 ``last`` 字段的 *嵌入文档* 。

- ``birth`` 和 ``death`` 持有 *Date* 类型.

- ``contribs`` 持有 *array of strings*.

- ``views`` 持有 *NumberLong* 类型.

字段名称
~~~~~~~~~~~

字段名为字符串。

.. include:: /includes/fact-document-field-name-restrictions.rst

BSON 文档可能具有多个同名的字段。但是, 大多数
:doc:`MongoDB 接口 </applications/drivers>` 都代表了不支持重复字段名称
的结构 (如哈希表)。如果需要操作具有相同名称的多个字段的文档,
请参阅 :doc:`驱动程序文档</applications/drivers>`。

由内部 MongoDB 进程创建的某些文档可能具有重复的字段, 但没有 MongoDB 进程会
向现有 **用户文档** 中添加重复字段。

字段值限制
~~~~~~~~~~~~~~~~~

对于 :doc:`有索引的集合 </indexes>` , 索引字段的值具有
:limit:`最大索引键长度 <Index Key Limit>` 限制。有关详细信息,
请参阅 :limit:`最大索引键长度 <Index Key Limit>` 。

.. _document-dot-notation:

点表示法
------------

MongoDB 使用点（``.``）符号访问数组的元素和嵌入文档的字段。

Arrays
~~~~~~

若要通过从零开始的索引位置指定或访问数组的元素, 请将数组名称与点
(``.``) 和从零开始的索引位置连接, 并将其括在引号中:

.. code-block:: javascript

   "<array>.<index>"

例如, 给定文档中的以下字段:

.. code-block:: javascript

   {
      ...
      contribs: [ "Turing machine", "Turing test", "Turingery" ],
      ...
   }

若要指定 ``contribs`` 数组中的第三个元素, 请使用点
表示法 ``"contribs.2"`` 。

有关查询数组的示例, 请参见:

- :doc:`/tutorial/query-arrays`

- :doc:`/tutorial/query-array-of-documents/`

.. seealso::

   - :update:`$` 用于更新操作的位置运算符,

   - :projection:`$` 数组索引位置未知时的投影运算符,

   - :ref:`read-operations-arrays` 对于带数组的点表示法示例。

嵌入式文档
~~~~~~~~~~~~~~~~~~

要指定或访问带点表示法的嵌入式文档的字段, 请将嵌入的文档名称与
点 (``.``) 和字段名称串联在一起, 并用引号括起来:

.. code-block:: javascript

   "<embedded document>.<field>"

例如, 给定文档中的以下字段:

.. code-block:: javascript

   {
      ...
      name: { first: "Alan", last: "Turing" },
      contact: { phone: { type: "cell", number: "111-222-3333" } },
      ...
   }

- 若要指定 ``name`` 字段中名为 ``last`` 的字段, 请使用点表示法 ``"name.last"`` 。

- 要在 ``contact`` 字段中指定 ``phone`` 文档中的 ``number`` , 请使用
  点表示法 ``"contact.phone.number"`` 。

有关查询嵌入文档的示例, 请参见:

- :doc:`/tutorial/query-embedded-documents`

- :doc:`/tutorial/query-array-of-documents/`

文档限制
--------------------

文档具有以下属性:

文档大小限制
~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-document-max-size.rst

文档字段顺序
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-update-field-order.rst
   :start-after: order-of-document-fields

.. _document-id-field:

``_id`` 字段
~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-id-field.rst

``_id`` 字段具有以下行为和约束::

- 默认情况下, MongoDB 在创建集合期间在``_id`` 字段上创建一个唯一索引。

- ``_id`` 字段始终是文档中的第一个字段。如果服务器首先接收到没有 ``_id`` 字段
  的文档, 则服务器会将该字段移到开头。（译：如果插入的文档中没有 ``_id`` 字
  段, 自动创建 ``_id`` , 并将其放到第一个）

- ``_id`` 字段可能包含任何 BSON 数据类型的值, 而不是一个数组。

  .. warning:: 为了确保复制功能, 请勿在 ``_id`` 字段中存储 BSON 正则
     表达式类型的值。

     .. See :issue:`SERVER-9562` for more information.

以下是用于存储 ``_id`` 值的常用选项:

- 使用 :ref:`objectid`.

- 使用自然唯一标识符 (如果可用)。这样可以节省空间并避免附加索引。

- 生成一个自增长的数字。

- 在应用程序代码中生成 UUID。为了更有效地在集合和 ``_id`` 索引中存储
  UUID 的值, 将 UUID 存储为 BSON ``BinData`` 类型。

  .. include:: /includes/fact-bindata-storage-optimization.rst

- 使用驱动程序的 BSON UUID 工具生成 UUID. 请注意，驱动程序实现可能以
  不同的方式实现UUID序列化和反序列化逻辑，这可能与其他驱动程序不完全兼
  容。 有关 UUID 互操作性的信息, 请参阅 :api:`驱动程序文档 <>` 。

.. include:: /includes/note-insert-id-field.rst

文档结构的其他用法
------------------------------------

除了定义数据记录外, MongoDB 使用文档结构, 包括但不限于:
:ref:`查询过滤 <document-query-filter>`, :ref:`更新规范文档
<document-update-specification>`, and :ref:`索引
规范文档 <document-index-specification>`

.. _document-query-filter:

过滤查询文档
~~~~~~~~~~~~~~~~~~~~~~

过滤查询文档指定用于确定哪些记录以供读取、更新和删除操作选择的
条件。（译：就是用来指定查询条件的文档/document）

可以使用 ``<field>:<value>`` 表达式来指定相等条件
和 :doc:`查询运算符 </reference/operator/query>` 表达式。

.. code-block:: javascript

   {
     <field1>: <value1>,
     <field2>: { <operator>: <value> },
     ...
   }

For examples, see:

- :doc:`/tutorial/query-documents`

- :doc:`/tutorial/query-embedded-documents`
   
- :doc:`/tutorial/query-arrays`

- :doc:`/tutorial/query-array-of-documents/`

.. _document-update-specification:

更新规范文档
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

更新规范文档使用  :ref:`update operators <update-operators>` 指定
在 :method:`db.collection.update()` 操作期间对特定字段执行的数据修改。

.. code-block:: javascript

   {
     <operator1>: { <field1>: <value1>, ... },
     <operator2>: { <field2>: <value2>, ... },
     ...
   }


有关示例, 请参见 :ref:`更新规范
<update-documents-modifiers>`.

.. _document-index-specification:

索引规范文档
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

索引规范文档定义要索引的字段和索引类型:

.. code-block:: javascript

   { <field1>: <type1>, <field2>: <type2>, ...  }
