.. index:: index; unique
.. _index-type-unique:

==============
Unique Indexes
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

A unique index ensures that the indexed fields do not store duplicate
values; i.e. enforces uniqueness for the indexed fields. By default,
MongoDB creates a unique index on the :ref:`_id <document-id-field>`
field during the creation of a collection.

Create a Unique Index
---------------------

To create a unique index, use the :method:`db.collection.createIndex()`
method with the ``unique`` option set to ``true``. 

.. code-block:: javascript

   db.collection.createIndex( <key and index type specification>, { unique: true } )

.. index:: index; unique
.. _index-unique-index:

Unique Index on a Single Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For example, to create a unique index on the ``user_id`` field of the
``members`` collection, use the following operation in the
:program:`mongo` shell:

.. code-block:: javascript

   db.members.createIndex( { "user_id": 1 }, { unique: true } )

Unique Compound Index
~~~~~~~~~~~~~~~~~~~~~

You can also enforce a unique constraint on :ref:`compound indexes
<index-type-compound>`. If you use the unique constraint on a
:ref:`compound index <index-type-compound>`, then MongoDB will enforce
uniqueness on the *combination* of the index key values.

For example, to create a unique index on ``groupNumber``, ``lastname``,
and ``firstname`` fields of the ``members`` collection, use the
following operation in the :program:`mongo` shell:

.. code-block:: javascript

   db.members.createIndex( { groupNumber: 1, lastname: 1, firstname: 1 }, { unique: true } )

The created index enforces uniqueness for the *combination* of
``groupNumber``, ``lastname``, and ``firstname`` values.

Behavior
--------

Restrictions
~~~~~~~~~~~~~

MongoDB cannot create a :ref:`unique index <index-type-unique>` on the
specified index field(s) if the collection already contains data that
would violate the unique constraint for the index.

You may not specify a unique constraint on a :ref:`hashed
index <index-type-hashed>`.

Unique Constraint Across Separate Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The unique constraint applies to separate documents in the collection.
That is, the unique index prevents *separate* documents from having the
same value for the indexed key, but the index does not prevent a
document from having multiple elements or embedded documents in an
indexed array from having the same value. In the case of a single
document with repeating values, the repeated value is inserted into the
index only once.

For example, a collection has a unique index on ``a.b``:

.. code-block:: javascript

   db.collection.createIndex( { "a.b": 1 }, { unique: true } )

The unique index permits the insertion of the following document into
the collection if no other document in the collection has the ``a.b``
value of ``5``:

.. code-block:: javascript

   db.collection.insert( { a: [ { b: 5 }, { b: 5 } ] } )

.. _unique-index-and-missing-field:

Unique Index and Missing Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If a document does not have a value for the indexed field in a unique
index, the index will store a null value for this document. Because of
the unique constraint, MongoDB will only permit one document that lacks
the indexed field. If there is more than one document without a value
for the indexed field or is missing the indexed field, the index build
will fail with a duplicate key error.

For example, a collection has a unique index on ``x``:

.. code-block:: javascript

   db.collection.createIndex( { "x": 1 }, { unique: true } )

The unique index allows the insertion of a document without the field
``x`` if the collection does not already contain a document missing the
field ``x``:

.. code-block:: javascript

   db.collection.insert( { y: 1 } )

However, the unique index errors on the insertion of a document without
the field ``x`` if the collection already contains a document missing
the field ``x``:

.. code-block:: javascript

   db.collection.insert( { z: 1 } )

The operation fails to insert the document because of the violation of
the unique constraint on the value of the field ``x``:

.. code-block:: javascript

   WriteResult({
      "nInserted" : 0,
      "writeError" : {
         "code" : 11000,
         "errmsg" : "E11000 duplicate key error index: test.collection.$a.b_1 dup key: { : null }"
      }
   })

.. seealso:: :ref:`unique-partial-indexes`

.. _unique-partial-indexes:

Unique Partial Indexes
~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.2

Partial indexes only index the documents in a collection that meet a
specified filter expression. If you specify both the
``partialFilterExpression`` and a :ref:`unique constraint
<index-type-unique>`, the unique constraint only applies to the
documents that meet the filter expression.

A partial index with a unique constraint does not prevent the insertion
of documents that do not meet the unique constraint if the documents do
not meet the filter criteria. For an example, see
:ref:`partial-index-with-unique-constraints`.
