.. _bson-types:

==========
BSON类型
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

:term:`BSON` 是用于存储文档和在 MongoDB 中进行远程过程调用的二进制序列化
格式。BSON 规范位于 `bsonspec.org <http://bsonspec.org/>`_.

BSON 支持下列数据类型作为文档中的值。每个数据类型都有一个对应的编号和字符串
别名, 可与 :query:`$type` 运算符一起使用以 BSON 类型的形式查询文档。

.. include:: /includes/fact-bson-types.rst

要确定字段的类型, 请参阅 :ref:`check-types-in-shell`.

如果将 BSON 转换为 JSON, 请参
阅 :doc:`Extended JSON </reference/mongodb-extended-json>` .

以下各节介绍特定 BSON 类型的特殊注意事项。

.. _document-bson-type-object-id:
.. _objectid:

ObjectId
--------

ObjectIds 很小, 很可能是唯一的, 快速生成的, 有序的。ObjectIds 值由12字节
组成, 其中前四个字节是一个反映 ObjectIds 创建的时间戳, 具体而言:

.. include:: /includes/fact-ObjectId-construct.rst

.. include:: /includes/fact-id-field.rst

mongodb 客户端应添加一个具有唯一 ObjectId 的``_id`` 字段。 ``_id`` 字段
使用 ObjectIds 可以提供以下附加好处:

- 在 :program:`mongo` shell 中,可以使用 :method:`ObjectId.getTimestamp()` 方法
  访问ObjectId的创建时间。

- 对存储 ``ObjectId`` 值的 ``_id`` 字段进行排序大致相当于按创建时间排序。

  .. important::
     .. include:: /includes/fact-ObjectId-timestamp-order.rst

.. seealso:: :method:`ObjectId()`

.. _document-bson-type-string:

String
------

BSON 字符串是 UTF-8。一般来说, 当序列化和反序列化为 BSON 时, 每个编程
语言的驱动程序将从语言的字符串格式转换为 UTF-8。这使得可以轻松地将大多数
国际字符存储在 BSON 字符串中。 [#sort-string-internationalization]_ 此
外, MongoDB :query:`$regex` 查询支持正则字符串中的 UTF-8。

.. [#sort-string-internationalization] 给定字符串使用 UTF-8 字符集, 在
   字符串上使用 :method:`sort() <cursor.sort()>` 将是合理的正确。但是, 由于
   内部 :method:`sort() <cursor.sort()>` 使用 C++ ``strcmp`` api, 排序
   次序可能会处理一些字符错误。

.. _document-bson-type-timestamp:

时间戳
----------

BSON 具有用于 *内部* MongoDB 使用的特殊时间戳类型, 并且 **不** 与常规
:ref:`document-bson-type-date` 类型关联。时间戳值为64位值, 其中:

- 前32位是 ``time_t`` 值 (自 unix 纪元以来的秒)

- 第二个32位是在给定的秒内运算的递增 ``序号`` 。

在单个 :program:`mongod` 实例中, 时间戳值始终是唯一的。

在复制集中, :term:`oplog` 有一个 ``ts`` 字段。此字段中的值反映了
使用 BSON 时间戳值的操作时间。

.. note::

   BSON 时间戳类型用于 *内部* MongoDB 使用。对于大多数情况, 在应用程序
   开发中, 您将希望使用 BSON 日期类型。有关详细信息, 请
   参阅 :ref:`document-bson-type-date` 。

如果在顶级字段中插入包含空 BSON 时间戳的文档, 则 MongoDB 服务器
将用当前时间戳值替换该空时间戳。例如, 如果创建了一个带有时间戳值的
插入文档, 如下面的操作所示:

.. code-block:: javascript

   var a = new Timestamp();

   db.test.insertOne( { ts: a } );

然后, :method:`db.test.find() <db.collection.find()>` 操作将返回
类似于以下内容的文档:

.. code-block:: javascript

   { "_id" : ObjectId("542c2b97bac0595474108b48"), "ts" : Timestamp(1412180887, 1) }

如果 ``ts`` 是嵌入文档中的一个字段(非顶级), 则服务器将其保留为空的时间戳值。

.. versionchanged:: 2.6
   以前, 服务器只替换插入文档的前两个字段 (包括 ``_id`` ) 中的空时间戳值。现
   在 MongoDB 将替换任何顶级字段。

.. _document-bson-type-date:

Date
-----

BSON 日期是一个64位整数, 它表示自 unix 纪元 (1970年1月1日) 以来的
毫秒数。这将导致一个能表示的日期范围约2.9亿年, 进入过去和未来。

`官方 BSON 规范 <http://bsonspec.org/#/specification>`_ 是指 BSON 日期类型为 *UTC datetime*.

BSON数据类型是有符号的. [#unsigned-date]_ 负值表示1970前的日期。

.. example:: 使用 :program:`mongo` shell 中的 ``new Date()`` 构造函数构造日期:

   .. code-block:: javascript

      var mydate1 = new Date()

.. example:: 使用 :program:`mongo` shell 中的 ``ISODate()`` 构造函数构造日期:

   .. code-block:: javascript

      var mydate2 = ISODate()

.. example:: 将 ``Date`` 值作为字符串返回:

   .. code-block:: javascript

      mydate1.toString()

.. example:: 返回 Date 值的月份部分;月份是零索引的, 因此一月为 ``0``:

   .. code-block:: javascript

      mydate1.getMonth()

.. [#unsigned-date] 在版本2.0 之前, ``日期`` 值被错误地解释为 *无符号* 整数, 它
   影响 ``日期`` 字段的排序、范围查询和索引。由于在升级时不重新创建索引, 如果您
   创建了一个具有早期版本的 ``日期`` 值的索引, 并且在1970之前
   的 ``日期`` 与您的应用程序相关, 请重新索引。
