=====================
MongoDB JSON 扩展
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

:term:`JSON` 只能表示 :term:`BSON` 支持的类型的子集。要保留类
型信息, MongoDB 将以下扩展名添加到 JSON 格式:

- *严格模式* . BSON 类型的严格模式表示符合 `JSON RFC <http://www.json.org>`_.
  任何 JSON 分析器都可以将这些严格模式表示形式解析为键/值对;但是, 只
  有 MongoDB 内部 JSON 分析器才能识别由格式传达的类型信息。

- ``mongo`` *Shell mode*. The MongoDB 内部 JSON 分析器和
  :program:`mongo` shell 可以解析此模式.

用于各种数据类型的表示形式取决于分析 JSON 的上下文。

分析器和支持的格式
----------------------------

严格模式的输入
~~~~~~~~~~~~~~~~~~~~

以下内容可以在严格模式下分析表示形式, 并识别类型信息。

- :ecosystem:`REST 接口 </tools/http-interfaces>`

- :program:`mongoimport`

- 各种 MongoDB 工具的 ``--query`` 选项

- :products:`MongoDB Compass </compass>`

其他 JSON 分析器, 包括 :program:`mongo`  shell 和 :method:`db.eval()`, 可
以将严格模式表示形式解析为键/值对, 但 *不* 识别类型信息。

``mongo`` Shell 的输入
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

在 ``mongo`` shell 模式中可以解析以下工具的类型表示。

- :ecosystem:`REST 接口 </tools/http-interfaces>`

- :program:`mongoimport`

- 各种 MongoDB 工具的 ``--query`` 选项

- :program:`mongo` shell

严格模式下的输出
~~~~~~~~~~~~~~~~~~~~~

:program:`mongoexport` 、 :ecosystem:`REST 和 HTTP 接口
</tools/http-interfaces>` 以 *严格模式* 输出数据.

``mongo`` Shell 的输出
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``mongo`` *Shell mode* 输出 :program:`bsondump` .

BSON 数据类型和关联表示法
----------------------------------------------

下面介绍了在 *严格模式* 和 ``mongo`` *Shell 模式* 下 BSON 数据
类型和关联表示法。

Binary
~~~~~~

.. bsontype:: data_binary

   .. list-table::
      :header-rows: 1
      :widths: 50 5 40

      * - Strict Mode

        -

        - mongo Shell Mode

      * - .. code-block:: none

             { "$binary": "<bindata>", "$type": "<t>" }

        -

        - .. code-block:: none

             BinData ( <t>, <bindata> )

- ``<bindata>`` 是二进制字符串的 base64 表示形式.

- ``<t>`` 是表示数据类型的单个字节。在 *严格模式* 下, 它是一个十六进制字
  符串, 在 *shell 模式* 下它是一个整数。请参阅扩展的 bson 文
  档. http://bsonspec.org/spec.html

日期
~~~~

.. bsontype:: data_date

   .. list-table::
      :header-rows: 1
      :widths: 40 20 40

      * - Strict Mode

        -

        - mongo Shell Mode

      * - .. code-block:: none

             { "$date": "<date>" }

        -

        - .. code-block:: none

             new Date ( <date> )

   在 *严格模式* 下, ``<date>`` 是一个 ISO-8601 的日期格式，强制
   带有时区字段： ``YYYY-MM-DDTHH:mm:ss.mmm<+/-Offset>``.

   MongoDB JSON 分析器当前不支持在  :term:`Unix epoch` 之前加载表示日期的 ISO-8601 字符串。当
   格式化纪元前日期和日期超过您的系统的 ``time_t`` 类型可以容纳时, 使用以下格式:

   .. code-block:: none

      { "$date" : { "$numberLong" : "<dateAsMilliseconds>" } }

   在 *shell 模式* 下, ``<date>`` 是一个64位有符号整数的 JSON 表示形式, 它提
   供了从 UTC 纪元开始的毫秒数。

时间戳
~~~~~~~~~

.. bsontype:: data_timestamp

   .. list-table::
      :header-rows: 1
      :widths: 40 10 30

      * - Strict Mode

        -

        - mongo Shell Mode

      * - .. code-block:: none

             { "$timestamp": { "t": <t>, "i": <i> } }

        -

        - .. code-block:: none

             Timestamp( <t>, <i> )

- ``<t>`` 是自纪元以来的32位无符号整数的 JSON 表示形式。

- ``<i>`` 是增量的32位无符号整数。

正则表达式
~~~~~~~~~~~~~~~~~~

.. bsontype:: data_regex

   .. list-table::
      :header-rows: 1
      :widths: 50 5 30

      * - Strict Mode

        -

        - mongo Shell Mode

      * - .. code-block:: none

             { "$regex": "<sRegex>", "$options": "<sOptions>" }

        -

        - .. code-block:: none

             /<jRegex>/<jOptions>

- ``<sRegex>`` 是一串有效的 JSON 字符。

- ``<jRegex>`` 是一个字符串, 它可能包含有效的 JSON 字符和非转义双引号 (``"``) 字
  符, 但可能不包含非转义正斜杠 (``/``) 字符。

- ``<sOptions>`` 是一个字符串, 其中包含由字母表中的字母表示的 regex 选项。

- ``<jOptions>`` 是一个字符串, 它可能只包含字符 "g"、"i"、"m" 和 "s"(在 v1.9 中添
  加)。由于 ``JavaScript`` 和 ``mongo Shell`` 表示支持有限范围的选项, 因此在转换
  为此表示形式时, 将丢弃任何不合格选项。

OID
~~~

.. bsontype:: data_oid

   .. list-table::
      :header-rows: 1
      :widths: 40 20 40

      * - Strict Mode

        -

        - mongo Shell Mode

      * - .. code-block:: none

             { "$oid": "<id>" }

        -

        - .. code-block:: none

             ObjectId( "<id>" )

   ``<id>`` 是一个24字符长度的十六进制字符串。

DB Reference
~~~~~~~~~~~~

.. bsontype:: data_ref

   .. list-table::
      :header-rows: 1
      :widths: 50 5 30

      * - Strict Mode

        -

        - mongo Shell Mode

      * - .. code-block:: none

             { "$ref": "<name>", "$id": "<id>" }

        -

        - .. code-block:: none

             DBRef("<name>", "<id>")

- ``<name>`` 是一串有效的 JSON 字符。

- ``<id>`` 是任何有效的 JSON 扩展类型.

Undefined 类型
~~~~~~~~~~~~~~

.. bsontype:: data_undefined

   .. list-table::
      :header-rows: 1
      :widths: 40 20 40

      * - Strict Mode

        -

        - mongo Shell Mode

      * - .. code-block:: none

             { "$undefined": true }

        -

        - .. code-block:: none

             undefined

   JavaScript/BSON 未定义类型的表示形式。

   在查询文档中 *不能* 使用 ``undefined`` 。请考虑插入
   到 ``people`` 集合中的以下文档:
   
   .. code-block:: sh
   
      db.people.insert( { name : "Sally", age : undefined } )

   以下查询返回错误:
   
   .. code-block:: sh
   
      db.people.find( { age : undefined } )
      db.people.find( { age : { $gte : undefined } } )
   
   但是, 您可以使用  :query:`$type` 查询未定义的值, 如下所示:
   
   .. code-block:: sh
      
      db.people.find( { age : { $type : 6 } } )
   
   此查询返回 ``age`` 字段具有 ``undefined`` 所有文档。

MinKey
~~~~~~

.. bsontype:: data_minkey

   .. list-table::
      :header-rows: 1
      :widths: 40 20 40

      * - Strict Mode

        -

        - mongo Shell Mode

      * - .. code-block:: none

             { "$minKey": 1 }

        -

        - .. code-block:: none

             MinKey

   MinKey BSON 数据类型的表示比其他所有类型都低。有关 BSON 类型的比较顺序的详细
   信息, 请参阅 :ref:`faq-dev-compare-order-for-BSON-types` .

MaxKey
~~~~~~

.. bsontype:: data_maxkey

   .. list-table::
      :header-rows: 1
      :widths: 40 20 40

      * - Strict Mode

        -

        - mongo Shell Mode

      * - .. code-block:: none

             { "$maxKey": 1 }

        -

        - .. code-block:: none

             MaxKey

   MaxKey BSON 数据类型的表示比其他所有类型都高。有关 BSON 类型的比较顺序的详细
   信息, 请参阅 :ref:`faq-dev-compare-order-for-BSON-types` .

NumberLong
~~~~~~~~~~

.. versionadded:: 2.6

.. bsontype:: data_numberlong

   .. list-table::
      :header-rows: 1
      :widths: 40 10 30

      * - Strict Mode

        -

        - mongo Shell Mode

      * - .. code-block:: none

             { "$numberLong": "<number>" }

        -

        - .. code-block:: none

             NumberLong( "<number>" )

   ``NumberLong`` 是64位有符号整数。您必须包含引号, 否则将被解释为浮点数字, 从
   而导致精度损失。

   例如, 下面的命令将9223372036854775807作为 ``NumberLong`` 插入, 并在整数值
   两边不加引号:

   .. code-block:: sh

      db.json.insert( { longQuoted : NumberLong("9223372036854775807") } )
      db.json.insert( { longUnQuoted : NumberLong(9223372036854775807) } )

   当您检索文档时, ``longUnquoted`` 的值已更改, 而 ``longQuoted`` 保留其准确性:

   .. code-block:: sh

      db.json.find()
      { "_id" : ObjectId("54ee1f2d33335326d70987df"), "longQuoted" : NumberLong("9223372036854775807") }
      { "_id" : ObjectId("54ee1f7433335326d70987e0"), "longUnquoted" : NumberLong("-9223372036854775808") }
