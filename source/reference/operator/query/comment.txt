========
$comment
========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. query:: $comment

   The :query:`$comment` query operator associates a comment to any
   expression taking a query predicate.

   .. include:: /includes/fact-comment-reason.rst

   The :query:`$comment` operator has the form:

   .. code-block:: javascript

      db.collection.find( { <query>, $comment: <comment> } )

Behavior
--------

You can use the :query:`$comment` with any expression taking a query
predicate, such as the query predicate in
:method:`db.collection.update()` or in the :pipeline:`$match` stage of
the :doc:`aggregation pipeline </meta/aggregation-quick-reference>`.
For an example, see :ref:`ex-comment-agg-expression`.

Examples
--------

Attach a Comment to ``find``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example adds a :query:`$comment` to a
:method:`~db.collection.find()` operation :

.. code-block:: javascript

   db.records.find(
      {
        x: { $mod: [ 2, 0 ] },
        $comment: "Find even values."
      }
   )

.. _ex-comment-agg-expression:

Attach a Comment to an Aggregation Expression
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use the :query:`$comment` with any expression taking a query
predicate.

The following examples uses the :query:`$comment` operator in the
:pipeline:`$match` stage to clarify the operation:

.. code-block:: javascript

   db.records.aggregate( [
      { $match: { x: { $gt: 0 }, $comment: "Don't allow negative inputs." } },
      { $group : { _id: { $mod: [ "$x", 2 ] }, total: { $sum: "$x" } } }
   ] )

.. seealso:: :operator:`$comment`
